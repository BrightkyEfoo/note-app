on:
  workflow_dispatch:
  push:
    branches:
        - main
env:
  NODE_VERSION: '20.x'
  FOLDER: ~/applications/note-app/backend
  IMAGE_VERSION: 2.0.${{ github.run_number }}
  IMAGE_NAME: brightky/note_app

jobs:
    create-folder:
        name: Create folder
        runs-on: ubuntu-latest
        steps:
            - name: Create folder
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ secrets.HOST }}
                port: ${{ secrets.PORT }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.PRIVATE_KEY }}
                script: |
                    rm -rf ${{ env.FOLDER }}
                    mkdir -p  ${{ env.FOLDER }}
                    chmod ugo+rwx  ${{ env.FOLDER }}
    copy-configs:
        name: 'copy configs'
        runs-on: ubuntu-latest
        needs: create-folder
        steps:
            - uses: actions/checkout@master
            - name: copy file via ssh password
              uses: appleboy/scp-action@master
              with:
                host: ${{ secrets.HOST }}
                port: ${{ secrets.PORT }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.PRIVATE_KEY }}
                source: "docker-compose.yml,dockerConfig/postgres-dev-init.sql"
                target: ${{ env.FOLDER }}

    dockerize:
        runs-on: ubuntu-latest
        steps:
            -
                name: Set up QEMU
                uses: docker/setup-qemu-action@v3
            -
                name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3
            -
                name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}
            -
                name: Build and push
                uses: docker/build-push-action@v5
                with:
                    push: true
                    tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
                    no-cache: true
    run-container:
        name: 'Run container'
        needs: 
            - copy-configs
            - dockerize
        runs-on: ubuntu-latest
        steps:
            - name: Run container
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.HOST }}
                port: ${{ secrets.PORT }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.PRIVATE_KEY }}
                script: |

                    docker compose -f ${{ env.FOLDER }}/docker-compose.yml stop || true
                    docker compose -f ${{ env.FOLDER }}/docker-compose.yml rm -f || true

                    rm ${{ env.FOLDER }}/.env
                    echo TZ=UTC >> ${{ env.FOLDER }}/.env
                    echo PORT=3333 >> ${{ env.FOLDER }}/.env
                    echo HOST=0.0.0.0 >> ${{ env.FOLDER }}/.env
                    echo LOG_LEVEL=info >> ${{ env.FOLDER }}/.env
                    echo APP_KEY=${{ secrets.APP_KEY }} >> ${{ env.FOLDER }}/.env
                    echo NODE_ENV=production >> ${{ env.FOLDER }}/.env
                    # echo DB_HOST=postgres >> ${{ env.FOLDER }}/.env
                    echo DB_PORT=5432 >> ${{ env.FOLDER }}/.env
                    echo DB_USER=root >> ${{ env.FOLDER }}/.env
                    echo DB_PASSWORD=12345678 >> ${{ env.FOLDER }}/.env
                    echo DB_DATABASE=note_app >> ${{ env.FOLDER }}/.env
                    echo IMAGE_VERSION=${{ env.IMAGE_VERSION }} >> ${{ env.FOLDER }}/.env
                    echo IMAGE_NAME=${{ env.IMAGE_NAME }} >> ${{ env.FOLDER }}/.env
                    docker compose -f ${{ env.FOLDER }}/docker-compose.yml up -d